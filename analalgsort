//Funkcja główna, miłego przeglądania... Krystian Tokarczyk
#include "nag.h"

int main() {

	int ile, *tab1, *tab2;
	clock_t start, stop;
	double czas;
	fstream plik;

	cout << "Analiza czasu potrzebnego do przesortowania elementow z przedzialu <-100,100>" << endl << endl <<
		"Podaj ilosc liczb do posortowania: ";
	cin >> ile;

	//Alokacja pamięci 
	tab1 = new int[ile];
	tab2 = new int[ile];

	plik.open("wyniki.txt", ios::trunc | ios::out);

	if (plik.is_open() == true)
	{
		cout << "Zapis do pliku ~ wyniki.txt" << endl;
	}
	else {
		cout << "Error! Plik nie zostal otwarty!" << endl;
	}

	//Wypełnanie tablicy i kopiowanie 
	wypelnianie(tab1, ile);
	kopia(tab1, tab2, ile);
	
	//Sortowanie bąbelkowe (uwaga na nadmiar danych ~ bywa powolne)
	char jolo;
	cout << endl << "Uwaga sortowanie babelkowe dla wielu danych moze trwac dosyc dlugo! \n nacisnij 1 by sortowac" << endl << ":";
	jolo = getch();

	if (jolo == '1') {
		//Sortowanie właściewe
		cout << endl;
		cout << "Sortowanie babelkowe wlasciwe..." << endl;
		plik << endl << "Sortowanie babelkowe wlasciwe..." << endl;
		start = clock();
		sort_bbom(tab2, ile);
		stop = clock();
		czas = (double)(stop - start) / CLOCKS_PER_SEC;
		plik << czas << endl;

		kopia(tab1, tab2, ile);

		//Sortowanie odwrotne
		cout << "Sortowanie babelkowe odwrotne..." << endl;
		plik << endl << "Sortowanie babelkowe odwrotne..." << endl;
		start = clock();
		sort_bbom_min(tab2, ile);
		stop = clock();
		czas = (double)(stop - start) / CLOCKS_PER_SEC;
		plik << czas << endl;
	}

	//Sortowanie algorytmem Quicksort
	kopia(tab1, tab2, ile);
	//Sortowanie właściwe
	cout << "Sortowanie QuickSort wlasciwe..." << endl;
	plik << endl << "Sortowanie QuickSort wlasciwe..." << endl;
	start = clock();
	qs(tab2, 0, ile - 1);
	stop = clock();
	czas = (double)(stop - start) / CLOCKS_PER_SEC;
	plik << czas << endl;

	kopia(tab1, tab2, ile);

	//Sortowanie odwrotne
	cout << "Sortowanie QuickSort odwrotne..." << endl;
	plik << endl << "Sortowanie QuickSort odwrotne..." << endl;
	start = clock();
	qs_o(tab2, 0, ile - 1);
	stop = clock();
	czas = (double)(stop - start) / CLOCKS_PER_SEC;
	plik << czas << endl;



	//Sortowanie Shell'a

	kopia(tab1, tab2, ile);

	cout << "Sortowanie Shell'a wlasciwe..." << endl;
	plik << endl << "Sortowanie Shell'a wlasciwe..." << endl;
	start = clock();
	shellSort(tab2, ile);
	stop = clock();
	czas = (double)(stop - start) / CLOCKS_PER_SEC;
	plik << czas << endl;

	cout << endl << endl;


	plik.close();
	//Zwalnianie pamięci 
	delete[] tab2;
	delete[] tab1;
	return 0;
}
